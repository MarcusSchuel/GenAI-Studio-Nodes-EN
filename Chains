# LangChain Chains Documentation

## Overview
This document provides a structured overview of the LangChain chains found in the configuration file. Each chain has a specific purpose, configuration options, and dependencies. Below is a detailed breakdown of all chains, their configurations, and their implementations.

---

## 1. **CombineDocsChain**
### **Description**
Loads a question-answering chain that combines document results for LLM responses.

### **Configuration Options**
- **llm (BaseLanguageModel)** – Language model used for processing queries.
- **chain_type (str, default: 'stuff')** – Strategy for document combination:
  - `stuff`
  - `map_reduce`
  - `map_rerank`
  - `refine`

### **Code Implementation**
- Implements a `CombineDocsChain` class that supports multiple document processing strategies.

---

## 2. **ConversationalRetrievalChain**
### **Description**
Retrieves information based on conversational history and rephrases follow-up questions for better responses.

### **Configuration Options**
- **llm (BaseLanguageModel)** – Language model for text processing.
- **memory (BaseChatMemory)** – Stores conversation history.
- **retriever (BaseRetriever)** – Retrieves relevant information.
- **chain_type (str, default: 'stuff')** – Document combination strategy.
- **return_source_documents (bool, default: true)** – Returns original documents.

### **Code Implementation**
- Uses `ConversationalRetrievalChain` with a prompt template to refine questions.

---

## 3. **ConversationChain**
### **Description**
A chain that enables conversation and memory-based context retrieval.

### **Configuration Options**
- **llm (BaseLanguageModel)** – Language model for responses.
- **memory (BaseMemory, optional)** – Stores context.

### **Code Implementation**
- Implements a `ConversationChainComponent` class that uses `ConversationChain` with optional memory.

---

## 4. **LLMCheckerChain**
### **Description**
Validates and checks responses generated by an LLM.

### **Configuration Options**
- **llm (BaseLanguageModel)** – Language model for response validation.

### **Code Implementation**
- Implements `LLMCheckerChainComponent` using `LLMCheckerChain.from_llm()`.

---

## 5. **LLMMathChain**
### **Description**
Executes mathematical calculations using LLMs by interpreting prompts and executing Python code.

### **Configuration Options**
- **llm (BaseLanguageModel)** – Language model for mathematical queries.
- **llm_chain (LLMChain)** – Chain used for generating responses.
- **input_key (str, default: 'question')** – Input parameter.
- **output_key (str, default: 'answer')** – Output parameter.
- **memory (BaseMemory, optional)** – Stores previous computations.

### **Code Implementation**
- Uses `LLMMathChain` to execute math operations through generated Python code.

---

## 6. **MidJourneyPromptChain**
### **Description**
A chain used to generate new prompts for MidJourney (AI-generated images).

### **Configuration Options**
- **llm (BaseLanguageModel)** – Language model for prompt generation.
- **memory (BaseChatMemory, optional)** – Stores context.

### **Code Implementation**
- Implements `MidJourneyPromptChain` for prompt generation.

---

## 7. **PromptRunner**
### **Description**
Executes a prompt using an LLM and returns the result.

### **Configuration Options**
- **llm (BaseLLM)** – Language model.
- **prompt (PromptTemplate)** – Template for prompt execution.
- **inputs (dict)** – Input values for prompt variables.

### **Code Implementation**
- Uses a `PromptRunner` component that chains a `PromptTemplate` with an LLM.

---

## 8. **RetrievalQA**
### **Description**
Executes question-answering against a retrievable dataset.

### **Configuration Options**
- **combine_documents_chain (BaseCombineDocumentsChain)** – Strategy for combining retrieved documents.
- **retriever (BaseRetriever)** – Retrieves relevant information.
- **memory (BaseMemory, optional)** – Stores context.
- **input_key (str, default: 'query')** – Input question.
- **output_key (str, default: 'result')** – Generated response.
- **return_source_documents (bool, default: true)** – Returns original documents.

### **Code Implementation**
- Implements `RetrievalQA` with support for retrieval-based question answering.

---

## 9. **SeriesCharacterChain**
### **Description**
Simulates a conversation with a character from a TV series.

### **Configuration Options**
- **llm (BaseLanguageModel)** – Language model.
- **character (str)** – Name of the character.
- **series (str)** – Name of the TV series.

### **Code Implementation**
- Implements `SeriesCharacterChain` for fictional character interactions.

---

## 10. **SQLDatabaseChain**
### **Description**
Executes SQL queries using a language model.

### **Configuration Options**
- **db (SQLDatabase)** – Connection to the SQL database.
- **llm (BaseLanguageModel)** – Language model for query interpretation.
- **prompt (BasePromptTemplate)** – SQL query prompt.

### **Code Implementation**
- Implements `SQLDatabaseChainComponent` using `SQLDatabaseChain.from_llm()`.

---

## 11. **TimeTravelGuideChain**
### **Description**
A chain that provides information about historical time periods for simulated time travel experiences.

### **Configuration Options**
- **llm (BaseLanguageModel)** – Language model.
- **memory (BaseChatMemory, optional)** – Stores conversation history.

### **Code Implementation**
- Implements `TimeTravelGuideChain` to provide historical insights.

---

## Summary
This document provides a comprehensive reference for configuring and implementing LangChain chains. Each chain specializes in a different task, including document retrieval, conversational AI, SQL queries, and mathematical operations. These chains integrate seamlessly with `LangChain` and `LangFlow` to enable powerful AI-driven workflows.

